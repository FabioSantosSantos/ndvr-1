rule
{
  id "DvInfo Messages should be signed by Router's key"
  for data
  filter
  {
    type name
    ; DvInfo messages are formatted as:
    ;  /ndvr/dvinfo/<networkName>/%C1.Router/<routerName>/<version>
    ; Example: /ndvr/dvinfo/ndn/%C1.Router/Router2/%FE%09
    regex ^<ndvr><dvinfo><><%C1.Router><><>$
  }
  checker
  {
    type customized
    sig-type rsa-sha256
    key-locator
    {
      type name
      hyper-relation
      {
        k-regex ^([^<KEY>]*)<KEY><>$
        k-expand \\1
        h-relation equal
        p-regex ^<ndvr><dvinfo>(<><%C1.Router><>)<>$
        p-expand \\1
      }
    }
  }
}

rule
{
  id "Router's certificate should be signed by Network's key"
  for data
  filter
  {
    type name
    ; Router Certificate is formatted as:
    ;  /<networkName>/%C1.Router/<routerName>/KEY/<label>/<issuer-id>/<version>
    ; Example: /ndn/%C1.Router/Router2/KEY/9%7B%E7%8B%C4g%AAw/NA/%FD%00
    regex ^<><%C1.Router><><KEY><><><>$
  }
  checker
  {
    type customized
    sig-type rsa-sha256
    key-locator
    {
      type name
      hyper-relation
      {
        k-regex ^([^<KEY>])<KEY><>$
        k-expand \\1
        h-relation equal
        p-regex ^(<>)<%C1.Router><><KEY><><><>$
        p-expand \\1
      }
    }
  }
}

trust-anchor
{
  type file
  file-name "./trust.cert"
}

